service: telematics-websocket

custom:
  stage: ${opt:stage, self:provider.stage}
  WEBSOCKETS_TABLE: ${self:custom.stage}_websocket_active_connections
  TELEMATICS_TABLE: ${self:custom.stage}_telematics
  settings:
    staging:
      STAGE: ${self:custom.stage}
    dev:
      STAGE: ${self:custom.stage}
    production:
      STAGE: ${self:custom.stage}
    apiGateway:
      dev:
        restApiId: z92bvmqd7b
        restApiRootResourceId: 73ctukv5ob
      staging:
        restApiId: z92bvmqd7b
        restApiRootResourceId: 73ctukv5ob
      production:
        restApiId: fd0rldztoh
        restApiRootResourceId: 8744o51k3a

provider:
  name: aws
  stage: ${opt:stage, self:provider.stage}
  region: us-east-1
  runtime: python3.9
  environment:
    WEBSOCKETS_TABLE: ${self:custom.WEBSOCKETS_TABLE}
    TELEMATICS_TABLE: ${self:custom.TELEMATICS_TABLE}
  iam:
      role:
        statements:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.WEBSOCKETS_TABLE}
              - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.TELEMATICS_TABLE}

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

functions:
  connect:
    handler: handler.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: handler.disconnect
    events:
      - websocket:
          route: $disconnect

  send_message:
    handler: handler.send_message
    events:
      - websocket:
          route: sendMessage

  receive:
    handler: data/data.insert
    events:
      - http:
          path: data/append
          method: post
          cors: true

  query_data:
    handler: data/historical.query_by_time
    events:
      - http:
          path: data/v1/get/{imei}/{start}/{end}
          method: get
          cors: true


resources:
  Resources:
    WebSocketDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "connection_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "connection_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.WEBSOCKETS_TABLE}
    TelematicsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "datetime"
            AttributeType: "N"
          - AttributeName: "imei"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "datetime"
            KeyType: "RANGE"
          - AttributeName: "imei"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 2
        TableName: ${self:custom.TELEMATICS_TABLE}
